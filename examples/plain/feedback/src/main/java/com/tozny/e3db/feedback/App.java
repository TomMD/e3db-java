package com.tozny.e3db.feedback;

import com.tozny.e3db.Client;
import com.tozny.e3db.ClientBuilder;
import com.tozny.e3db.Config;
import com.tozny.e3db.QueryParamsBuilder;
import com.tozny.e3db.QueryResponse;
import com.tozny.e3db.Record;
import com.tozny.e3db.Result;
import com.tozny.e3db.ResultHandler;

import org.apache.commons.io.IOUtils;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {

  public static void main(String[] args) throws IOException, InterruptedException {
    File credentials = Paths.get("reader.json").toFile();
    if(! credentials.exists()) {
      System.out.println("Need to create credentials file named reader.json");
      System.exit(1);
    }

    Config config = Config.fromJson(
      new String(IOUtils.toByteArray(new FileInputStream(credentials)), "UTF-8")
    );
    Client client = new ClientBuilder().fromConfig(config).build();

    final QueryParamsBuilder params = new QueryParamsBuilder()
      .setIncludeAllWriters(true)
      .setIncludeData(true)
      .setTypes("feedback")
      .setCount(50);

    // Read all feedback records into `comments`
    final List<Record> comments = new ArrayList<>();

    final AtomicBoolean done = new AtomicBoolean(false);
    while(! done.get()) {
      final CountDownLatch wait = new CountDownLatch(1);
      client.query(params.build(), new ResultHandler<QueryResponse>() {
        @Override
        public void handle(Result<QueryResponse> result) {
          if(result.isError())
            throw new RuntimeException("Error reading comments", result.asError().other());

          for (Record r : result.asValue().records()) {
            comments.add(r);
          }

          if(result.asValue().records().size() > 0) {
            params.setAfter(result.asValue().last());
          }
          else {
            done.set(true);
          }

          wait.countDown();
        }
      });
      wait.await(30, TimeUnit.SECONDS);
    }

    if(comments.size() > 0) {
      System.out.println("From\tComment");
      System.out.println("----\t-------");
    }

    for(Record r : comments) {
      String comment = r.data().containsKey("comments") ? r.data().get("comments") : "";
      String name = r.data().containsKey("name") ? r.data().get("name") : "";
      System.out.println(name + "\t" + comment);
    }

    System.out.println("Got " + comments.size() + " comments.");

    // Write a "thanks for sharing" record back
    // Share the record
  }
}
